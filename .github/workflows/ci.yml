name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  python-tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./azure-mcp-server
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov flake8 black mypy
    
    - name: Lint with flake8
      run: |
        flake8 src --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Format check with black
      run: black --check src
    
    - name: Type check with mypy
      run: mypy src --ignore-missing-imports
    
    - name: Run tests
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=html
    
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./azure-mcp-server/coverage.xml
        flags: python

  node-tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./github-copilot-extension
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ./github-copilot-extension/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Lint
      run: npm run lint
    
    - name: Build
      run: npm run compile
    
    - name: Test
      run: npm test

  terraform-validate:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./azure-mcp-server/infrastructure/terraform
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.0
    
    - name: Terraform Init
      run: terraform init -backend=false
    
    - name: Terraform Format Check
      run: terraform fmt -check -recursive
    
    - name: Terraform Validate
      run: terraform validate

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  build-artifacts:
    runs-on: ubuntu-latest
    needs: [python-tests, node-tests, terraform-validate]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Package Function App
      working-directory: ./azure-mcp-server
      run: |
        cd src
        zip -r ../../function-app.zip . -x "__pycache__/*" "*.pyc" "tests/*" ".env"
    
    - name: Upload Function App artifact
      uses: actions/upload-artifact@v3
      with:
        name: function-app
        path: function-app.zip
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Build VS Code Extension
      working-directory: ./github-copilot-extension
      run: |
        npm ci
        npm run compile
        npm install -g vsce
        vsce package
    
    - name: Upload Extension artifact
      uses: actions/upload-artifact@v3
      with:
        name: vscode-extension
        path: ./github-copilot-extension/*.vsix